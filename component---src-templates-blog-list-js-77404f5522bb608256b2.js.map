{"version":3,"sources":["webpack://scottelundgren.github.io/./src/components/seo.js","webpack://scottelundgren.github.io/./src/templates/blog-list.js"],"names":["SEO","baseUrl","path","description","lang","meta","title","imageSrc","imageAlt","site","useStaticQuery","metaDescription","siteMetadata","imageUrl","siteUrl","htmlAttributes","titleTemplate","name","content","property","social","twitter","concat","link","rel","href","sizes","type","color","defaultProps","BlogIndex","render","data","this","props","siteTitle","posts","allMarkdownRemark","edges","pageContext","currentPage","numPages","isFirst","isLast","prevPage","toString","nextPage","keywords","className","map","node","key","fields","slug","frontmatter","image","childImageSharp","gatsbyImageData","to","style","backgroundImage","images","fallback","src","excerpt","date","timeToRead","role","React"],"mappings":"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","file":"component---src-templates-blog-list-js-77404f5522bb608256b2.js","sourcesContent":["/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport * as React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Helmet } from \"react-helmet\"\nimport { getSrc } from \"gatsby-plugin-image\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\n// Be lenient with null values making sure we\n// return null if either argument is not provided\nconst constructUrl = (baseUrl, path) => !baseUrl || !path ? null : `${baseUrl}${path}`;\n\nconst SEO = ({ description, lang, meta, title, imageSrc, imageAlt }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            social {\n              twitter\n            }\n            siteUrl\n          }\n        }\n      }\n    `\n  )  \n  const metaDescription = description || site.siteMetadata.description;\n  const imageUrl = constructUrl(site.siteMetadata.siteUrl, imageSrc);\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: \"og:image\",\n          content: imageUrl,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: imageUrl ? `summary_large_image` : `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.social.twitter\n        },\n        {\n          name: `twitter:description`,\n          content: description,\n        },\n        {\n          property: \"twitter:image:alt\",\n          content: imageAlt ? imageAlt : ``,\n        },\n        {\n          name: `msapplication-TileColor`,\n          content: `#2b5797`,\n        },\n        {\n          name: `theme-color`,\n          content: `#ffffff`,\n        },\n      ].concat(meta)}\n      link={[\n        {\n          rel: `apple-touch-icon`,\n          href: `/apple-touch-icon.png`,\n          sizes: `180x180`\n        },\n        {\n          rel: `icon`,\n          href: `/favicon-16x16.png`,\n          sizes: `16x16`,\n          type: `image/png`\n        },\n        {\n          rel: `icon`,\n          href: `/favicon-32x32.png`,\n          sizes: `32x32`,\n          type: `image/png`\n        },\n        {\n          rel: `manifest`,\n          href: `/site.webmanifest`\n        },\n        {\n          rel: `mask-icon`,\n          href: `/safari-pinned-tab.svg`,\n          color: `#5bbad5`\n        }\n      ].concat()}\n      />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO","import React from 'react'\nimport DefaultLayout from '../components/layout'\nimport SEO from '../components/seo'\nimport { Link, graphql } from 'gatsby'\n\nclass BlogIndex extends React.Component {\n  render() {\n    const { data } = this.props\n    const siteTitle = data.site.siteMetadata.title\n    const posts = data.allMarkdownRemark.edges\n    const { currentPage, numPages } = this.props.pageContext\n    const isFirst = currentPage === 1\n    const isLast = currentPage === numPages\n    const prevPage = currentPage - 1 === 1 ? '/' : (currentPage - 1).toString()\n    const nextPage = (currentPage + 1).toString()\n\n    return (\n      <DefaultLayout>\n        <SEO\n          title={siteTitle}\n          keywords={[`blog`, `gatsby`, `javascript`, `react`]}\n        />\n        <div className=\"content-box clearfix\">\n          {posts.map(({ node }) => {\n            return (\n              <article className=\"post\" key={node.fields.slug}>\n                {node.frontmatter.image &&\n                 node.frontmatter.image.childImageSharp &&\n                  node.frontmatter.image.childImageSharp.gatsbyImageData && (\n                    <Link\n                      to={node.fields.slug}\n                      className=\"post-thumbnail\"\n                      style={{\n                        backgroundImage: `url(${node.frontmatter.image.childImageSharp.gatsbyImageData.images.fallback.src})`,\n                      }}\n                    />\n                  )}\n                <div className=\"post-content\">\n                  <h2 className=\"post-title\">\n                    <Link to={node.fields.slug}>{node.frontmatter.title}</Link>\n                  </h2>\n                  <p>{node.excerpt}</p>\n                  <span className=\"post-date\">\n                    {node.frontmatter.date}&nbsp;&nbsp;—&nbsp;\n                  </span>\n                  <span className=\"post-words\">\n                    {node.timeToRead} minute read\n                  </span>\n                </div>\n              </article>\n            )\n          })}\n          <div className=\"container\">\n            <nav className=\"pagination\" role=\"navigation\">\n              <ul>\n                {!isFirst && (\n                  <p>\n                    <Link to={prevPage} rel=\"prev\" className=\"newer-posts\">\n                      ← Previous Page\n                    </Link>\n                  </p>\n                )}\n                <p>\n                  <span className=\"page-number\">\n                    Page {currentPage} of {numPages}\n                  </span>\n                </p>\n                {!isLast && (\n                  <p>\n                    <Link to={nextPage} rel=\"next\" className=\"older-posts\">\n                      Next Page →\n                    </Link>\n                  </p>\n                )}\n              </ul>\n            </nav>\n          </div>\n        </div>\n      </DefaultLayout>\n    )\n  }\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query blogPageQuery($skip: Int!, $limit: Int!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      limit: $limit\n      skip: $skip\n    ) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          timeToRead\n          frontmatter {\n            date(formatString: \"YYYY MMM DD\")\n            title\n            image {\n              childImageSharp {\n                gatsbyImageData(placeholder: BLURRED, layout: FULL_WIDTH)\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`"],"sourceRoot":""}