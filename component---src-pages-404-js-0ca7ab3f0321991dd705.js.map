{"version":3,"sources":["webpack://scottelundgren.github.io/./src/components/seo.js","webpack://scottelundgren.github.io/./src/pages/404.js"],"names":["constructUrl","baseUrl","path","SEO","description","lang","meta","title","imageSrc","imageAlt","slug","site","useStaticQuery","metaDescription","siteMetadata","imageUrl","siteUrl","pageUrl","htmlAttributes","titleTemplate","name","content","property","social","twitter","concat","link","rel","href","sizes","type","color","defaultProps","NotFoundPage","render","this","props","data","className","React"],"mappings":"2KAeMA,EAAe,SAACC,EAASC,GAAV,OAAoBD,GAAYC,EAAb,GAA8BD,EAAUC,EAApB,MAEtDC,EAAM,SAAC,GAAkE,IAAhEC,EAA+D,EAA/DA,YAAaC,EAAkD,EAAlDA,KAAMC,EAA4C,EAA5CA,KAAMC,EAAsC,EAAtCA,MAAOC,EAA+B,EAA/BA,SAAUC,EAAqB,EAArBA,SAAUC,EAAW,EAAXA,KACzDC,GAASC,QAAe,YAAxBD,KAeFE,EAAkBT,GAAeO,EAAKG,aAAaV,YACnDW,EAAWf,EAAaW,EAAKG,aAAaE,QAASR,GACnDS,EAAUjB,EAAaW,EAAKG,aAAaE,QAASN,GAExD,OACE,gBAAC,IAAD,CACEQ,eAAgB,CACdb,QAEFE,MAAOA,EACPY,cAAa,QAAUR,EAAKG,aAAaP,MACzCD,KAAM,CACJ,CACEc,KAAK,cACLC,QAASR,GAEX,CACES,SAAS,iBACTD,QAASR,GAEX,CACES,SAAS,WACTD,QAASd,GAEX,CACEe,SAAS,WACTD,QAASN,GAEX,CACEO,SAAS,UACTD,QAAQ,WAEV,CACEC,SAAS,SACTD,QAASJ,GAEX,CACEG,KAAK,eACLC,QAASN,EAAQ,iCAEnB,CACEK,KAAK,kBACLC,QAASV,EAAKG,aAAaS,OAAOC,SAEpC,CACEJ,KAAK,sBACLC,QAASjB,GAEX,CACEkB,SAAU,oBACVD,QAASZ,GAEX,CACEW,KAAK,0BACLC,QAAQ,WAEV,CACED,KAAK,cACLC,QAAQ,YAEVI,OAAOnB,GACToB,KAAM,CACJ,CACEC,IAAI,mBACJC,KAAK,wBACLC,MAAM,WAER,CACEF,IAAI,OACJC,KAAK,qBACLC,MAAM,QACNC,KAAK,aAEP,CACEH,IAAI,OACJC,KAAK,qBACLC,MAAM,QACNC,KAAK,aAEP,CACEH,IAAI,WACJC,KAAK,qBAEP,CACED,IAAI,YACJC,KAAK,yBACLG,MAAM,YAERN,YAKRtB,EAAI6B,aAAe,CACjB3B,KAAK,KACLC,KAAM,GACNF,YAAY,IAUd,O,qFCtIM6B,E,6FACJC,OAAA,WACmBC,KAAKC,MAAdC,KAER,OACE,gBAAC,IAAD,KACE,uBAAKC,UAAU,wBACf,gBAAC,IAAD,CAAK/B,MAAM,mBACX,sDACA,8B,GATmBgC,aAgB3B","file":"component---src-pages-404-js-0ca7ab3f0321991dd705.js","sourcesContent":["/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport * as React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Helmet } from \"react-helmet\"\nimport { getSrc } from \"gatsby-plugin-image\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\n// Be lenient with null values making sure we\n// return null if either argument is not provided\nconst constructUrl = (baseUrl, path) => !baseUrl || !path ? null : `${baseUrl}${path}`;\n\nconst SEO = ({ description, lang, meta, title, imageSrc, imageAlt, slug }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            social {\n              twitter\n            }\n            siteUrl\n          }\n        }\n      }\n    `\n  )  \n  const metaDescription = description || site.siteMetadata.description;\n  const imageUrl = constructUrl(site.siteMetadata.siteUrl, imageSrc);\n  const pageUrl = constructUrl(site.siteMetadata.siteUrl, slug);\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:image`,\n          content: imageUrl,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          property: `og:url`,\n          content: pageUrl,\n        },\n        {\n          name: `twitter:card`,\n          content: imageUrl ? `summary_large_image` : `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.social.twitter\n        },\n        {\n          name: `twitter:description`,\n          content: description,\n        },\n        {\n          property: \"twitter:image:alt\",\n          content: imageAlt,\n        },\n        {\n          name: `msapplication-TileColor`,\n          content: `#2b5797`,\n        },\n        {\n          name: `theme-color`,\n          content: `#ffffff`,\n        },\n      ].concat(meta)}\n      link={[\n        {\n          rel: `apple-touch-icon`,\n          href: `/apple-touch-icon.png`,\n          sizes: `180x180`\n        },\n        {\n          rel: `icon`,\n          href: `/favicon-16x16.png`,\n          sizes: `16x16`,\n          type: `image/png`\n        },\n        {\n          rel: `icon`,\n          href: `/favicon-32x32.png`,\n          sizes: `32x32`,\n          type: `image/png`\n        },\n        {\n          rel: `manifest`,\n          href: `/site.webmanifest`\n        },\n        {\n          rel: `mask-icon`,\n          href: `/safari-pinned-tab.svg`,\n          color: `#5bbad5`\n        }\n      ].concat()}\n      />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO","import React from 'react'\n\nimport DefaultLayout from '../components/layout'\nimport SEO from '../components/seo'\n\nclass NotFoundPage extends React.Component {\n  render() {\n    const { data } = this.props\n\n    return (\n      <DefaultLayout>\n        <div className=\"content-box clearfix\">\n        <SEO title=\"404: Not Found\" />\n        <h1>That page doesn&#39;t exist.</h1>\n        <br />\n        </div>\n      </DefaultLayout>\n    )\n  }\n}\n\nexport default NotFoundPage"],"sourceRoot":""}